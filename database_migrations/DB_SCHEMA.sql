-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.
-- IMPORTANT: Update this schema as needed, should always reflect latest

CREATE TABLE public.app_config (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  config_key character varying NOT NULL UNIQUE,
  config_value text NOT NULL,
  config_description text,
  is_active boolean DEFAULT true,
  is_encrypted boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  created_by uuid,
  updated_by uuid,
  CONSTRAINT app_config_pkey PRIMARY KEY (id),
  CONSTRAINT app_config_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id),
  CONSTRAINT app_config_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.cooking_sessions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  recipe_id uuid NOT NULL,
  started_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  success_rating smallint CHECK (success_rating >= 0 AND success_rating <= 5),
  help_requests jsonb,
  notes text,
  estimated_savings numeric,
  recipe_cost numeric,
  restaurant_cost numeric,
  CONSTRAINT cooking_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT cooking_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT cooking_sessions_recipe_id_fkey FOREIGN KEY (recipe_id) REFERENCES public.user_recipes(id)
);
CREATE TABLE public.meal_entries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  meal_plan_id uuid,
  entry_date date NOT NULL,
  meal_type text NOT NULL CHECK (meal_type = ANY (ARRAY['breakfast'::text, 'lunch'::text, 'dinner'::text, 'snacks'::text])),
  food_name text NOT NULL,
  brand_name text,
  serving_size text NOT NULL,
  quantity numeric DEFAULT 1,
  calories_per_serving integer NOT NULL,
  protein_per_serving numeric DEFAULT 0,
  carbs_per_serving numeric DEFAULT 0,
  fat_per_serving numeric DEFAULT 0,
  sugar_per_serving numeric DEFAULT 0,
  fiber_per_serving numeric DEFAULT 0,
  sodium_per_serving numeric DEFAULT 0,
  source text DEFAULT 'manual'::text,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT meal_entries_pkey PRIMARY KEY (id),
  CONSTRAINT meal_entries_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT meal_entries_meal_plan_id_fkey FOREIGN KEY (meal_plan_id) REFERENCES public.meal_plans(id)
);
CREATE TABLE public.meal_plan_grocery_lists (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  meal_plan_id uuid NOT NULL UNIQUE,
  items jsonb NOT NULL DEFAULT '[]'::jsonb,
  generated_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT meal_plan_grocery_lists_pkey PRIMARY KEY (id),
  CONSTRAINT meal_plan_grocery_lists_meal_plan_id_fkey FOREIGN KEY (meal_plan_id) REFERENCES public.meal_plans(id)
);
CREATE TABLE public.meal_plans (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  week_start_date date NOT NULL,
  title text NOT NULL,
  days jsonb NOT NULL DEFAULT '[]'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  CONSTRAINT meal_plans_pkey PRIMARY KEY (id),
  CONSTRAINT meal_plans_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_preferences (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  preferences_data jsonb NOT NULL DEFAULT '{}'::jsonb,
  version character varying NOT NULL DEFAULT '1.0'::character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_preferences_pkey PRIMARY KEY (id),
  CONSTRAINT user_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_profiles (
  id uuid NOT NULL,
  email text,
  skill_level text,
  cooking_fears ARRAY DEFAULT '{}'::text[],
  confidence_level smallint CHECK (confidence_level >= 1 AND confidence_level <= 5),
  kitchen_tools ARRAY DEFAULT '{}'::text[],
  stove_type text,
  has_oven boolean,
  space_level smallint CHECK (space_level >= 1 AND space_level <= 5),
  subscription_status text DEFAULT 'free'::text CHECK (subscription_status = ANY (ARRAY['free'::text, 'premium'::text])),
  recipes_generated_today smallint DEFAULT 0,
  last_recipe_date date,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  premium_until timestamp with time zone,
  subscription_product_id character varying,
  subscription_period_type character varying CHECK (subscription_period_type::text = ANY (ARRAY['NORMAL'::character varying, 'TRIAL'::character varying, 'INTRO'::character varying]::text[])),
  revenuecat_user_id character varying,
  last_webhook_processed timestamp with time zone,
  allergies ARRAY NOT NULL DEFAULT '{}'::text[],
  dietary_restrictions ARRAY NOT NULL DEFAULT '{}'::text[],
  daily_calorie_goal integer,
  daily_protein_goal integer,
  daily_carbs_goal integer,
  daily_fat_goal integer,
  macro_goals_set boolean DEFAULT false,
  onboarding_steps_completed jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT user_profiles_pkey PRIMARY KEY (id),
  CONSTRAINT user_profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_recipes (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  recipe_name text NOT NULL,
  recipe_content text NOT NULL,
  recipe_request text,
  difficulty_level smallint CHECK (difficulty_level >= 1 AND difficulty_level <= 5),
  estimated_time text,
  is_favorite boolean DEFAULT false,
  cook_count integer DEFAULT 0,
  user_rating smallint CHECK (user_rating >= 0 AND user_rating <= 5),
  created_at timestamp with time zone DEFAULT now(),
  last_cooked timestamp with time zone,
  recipe_data jsonb,
  cost_per_serving numeric,
  total_cost numeric,
  servings integer,
  calories_per_serving integer,
  protein_per_serving numeric DEFAULT NULL::numeric,
  carbs_per_serving numeric DEFAULT NULL::numeric,
  fat_per_serving numeric DEFAULT NULL::numeric,
  sugar_per_serving numeric DEFAULT NULL::numeric,
  fiber_per_serving numeric DEFAULT NULL::numeric,
  sodium_per_serving numeric DEFAULT NULL::numeric,
  CONSTRAINT user_recipes_pkey PRIMARY KEY (id),
  CONSTRAINT user_recipes_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_usage_tracking (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  week_start_date date NOT NULL,
  recipe_generations integer NOT NULL DEFAULT 0 CHECK (recipe_generations >= 0),
  grocery_list_generations integer NOT NULL DEFAULT 0 CHECK (grocery_list_generations >= 0),
  recipe_generation_limit integer NOT NULL DEFAULT 5 CHECK (recipe_generation_limit >= 0),
  grocery_list_limit integer NOT NULL DEFAULT 5 CHECK (grocery_list_limit >= 0),
  is_premium boolean NOT NULL DEFAULT false,
  premium_until timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_usage_tracking_pkey PRIMARY KEY (id),
  CONSTRAINT user_usage_tracking_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.webhook_events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  event_id character varying NOT NULL UNIQUE,
  event_type character varying NOT NULL,
  app_user_id uuid NOT NULL,
  product_id character varying,
  environment character varying NOT NULL CHECK (environment::text = ANY (ARRAY['PRODUCTION'::character varying, 'SANDBOX'::character varying]::text[])),
  store character varying CHECK (store::text = ANY (ARRAY['APP_STORE'::character varying, 'PLAY_STORE'::character varying, 'AMAZON'::character varying, 'STRIPE'::character varying]::text[])),
  event_data jsonb NOT NULL,
  processed_at timestamp with time zone NOT NULL DEFAULT now(),
  processing_status character varying DEFAULT 'success'::character varying CHECK (processing_status::text = ANY (ARRAY['success'::character varying, 'failed'::character varying, 'pending'::character varying]::text[])),
  error_message text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT webhook_events_pkey PRIMARY KEY (id)
);